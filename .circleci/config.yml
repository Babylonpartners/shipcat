version: 2

workflows:
  version: 2
  shipcat_flow:
    jobs:
      - musl_build:
          filters:
            tags:
              only: /^.*/
      - cargo_test:
          filters:
            branches:
              ignore:
                - master
      - docker_build:
          requires:
            - musl_build
          filters:
            branches:
              only:
                - master
      - docker_build_circleci:
          requires:
            - musl_build
          filters:
            branches:
              only:
                - master
      - mac_build:
          filters:
            tags:
              only: /^.*/
            branches:
              only:
                - master
      - github_release:
          context: babylon
          requires:
            - musl_build
            - mac_build
          filters:
            tags:
              only: /^.*/
            branches:
              ignore: /.*/
jobs:
  musl_build:
    docker:
      - image: clux/muslrust:stable
    working_directory: /volume
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
          - musl_cache_2_{{ checksum "Cargo.lock" }}
      - run: cargo build --release -p shipcat
      - run: cargo build --release -p raftcat
      - save_cache:
          paths:
            - /root/.cargo/registry
            - target
          key: musl_cache_2_{{ checksum "Cargo.lock" }}
      # Ensure we have a built `shipcat.x86_64-unknown-linux-musl` at workspace root
      - run: mv target/x86_64-unknown-linux-musl/release/shipcat{,.x86_64-unknown-linux-musl}
      - run: mv target/x86_64-unknown-linux-musl/release/raftcat{,.x86_64-unknown-linux-musl}
      - persist_to_workspace:
          root: target/x86_64-unknown-linux-musl/release/
          paths:
            - shipcat.x86_64-unknown-linux-musl
            - raftcat.x86_64-unknown-linux-musl

  cargo_test:
    docker:
      - image: circleci/rust:latest
    resource_class: xlarge
    environment:
      - RUST_BACKTRACE: "full"
    steps:
      - checkout
      - run: make sanity
      - restore_cache:
          keys:
          - debug_cache_2_{{ checksum "Cargo.lock" }}
      - run: cargo test --all --no-run
      - run: cargo test --all -- --nocapture
      # Tests within shipcat_definitions do not get run with features
      - run: |
            cd shipcat_definitions
            cargo test --features=filesystem -- --nocapture
      - run: cargo doc --no-deps --lib --all
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: debug_cache_2_{{ checksum "Cargo.lock" }}

  docker_build:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" quay.io
      - run: make build
      - run: make install
      - run: make tag-latest
      - run: make tag-semver
      - run: make raftcat
      - run: make raftcat-semver

  docker_build_circleci:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" quay.io
      - run: make build-circleci
      - run: make install-circleci
      - run: make tag-latest-circleci
      - run: make tag-semver-circleci

  mac_build:
    macos:
      xcode: "10.2.0"
    working_directory: /Users/distiller/project
    steps:
      - checkout
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      - restore_cache:
          keys:
          - mac_cache_{{ checksum "Cargo.lock" }}
      - run: ~/.cargo/bin/cargo build --release -p shipcat
      - save_cache:
          paths:
            - /Users/distiller/.cargo/registry
            - target
          key: mac_cache_{{ checksum "Cargo.lock" }}
      # Ensure we have a built `shipcat.x86_64-apple-darwin` at workspace root
      - run: mv target/release/shipcat{,.x86_64-apple-darwin}
      - persist_to_workspace:
          root: target/release/
          paths:
            - shipcat.x86_64-apple-darwin

  github_release:
    working_directory: ~/project
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: go get github.com/tcnksm/ghr
      - run: make releases
      - run:
          name: Create GitHub Release
          command: |
            ghr \
              -u $CIRCLE_PROJECT_USERNAME \
              -r $CIRCLE_PROJECT_REPONAME \
              --token "$GITHUB_RELEASE_TOKEN" \
              -replace $(git describe --abbrev=0 --tags) \
              releases/
