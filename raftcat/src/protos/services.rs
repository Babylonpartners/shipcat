// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `services.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct IsDeploying {
    // message fields
    pub status: IsDeploying_Status,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsDeploying {
    fn default() -> &'a IsDeploying {
        <IsDeploying as ::protobuf::Message>::default_instance()
    }
}

impl IsDeploying {
    pub fn new() -> IsDeploying {
        ::std::default::Default::default()
    }

    // .hub.IsDeploying.Status status = 1;


    pub fn get_status(&self) -> IsDeploying_Status {
        self.status
    }

    pub fn clear_status(&mut self) {
        self.status = IsDeploying_Status::STATUS_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: IsDeploying_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for IsDeploying {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.status,
                    1,
                    &mut self.unknown_fields,
                )?,
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != IsDeploying_Status::STATUS_INVALID {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.status != IsDeploying_Status::STATUS_INVALID {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsDeploying {
        IsDeploying::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeEnum<IsDeploying_Status>,
            >(
                "status",
                |m: &IsDeploying| &m.status,
                |m: &mut IsDeploying| &mut m.status,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IsDeploying>(
                "IsDeploying",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static IsDeploying {
        static instance: ::protobuf::rt::LazyV2<IsDeploying> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IsDeploying::new)
    }
}

impl ::protobuf::Clear for IsDeploying {
    fn clear(&mut self) {
        self.status = IsDeploying_Status::STATUS_INVALID;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IsDeploying {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsDeploying {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum IsDeploying_Status {
    STATUS_INVALID = 0,
    STATUS_IN_PROGRESS = 1,
    STATUS_COMPLETE = 2,
}

impl ::protobuf::ProtobufEnum for IsDeploying_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IsDeploying_Status> {
        match value {
            0 => ::std::option::Option::Some(IsDeploying_Status::STATUS_INVALID),
            1 => ::std::option::Option::Some(IsDeploying_Status::STATUS_IN_PROGRESS),
            2 => ::std::option::Option::Some(IsDeploying_Status::STATUS_COMPLETE),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IsDeploying_Status] = &[
            IsDeploying_Status::STATUS_INVALID,
            IsDeploying_Status::STATUS_IN_PROGRESS,
            IsDeploying_Status::STATUS_COMPLETE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IsDeploying_Status>(
                "IsDeploying.Status",
                file_descriptor_proto(),
            )
        })
    }
}

impl ::std::marker::Copy for IsDeploying_Status {}

impl ::std::default::Default for IsDeploying_Status {
    fn default() -> Self {
        IsDeploying_Status::STATUS_INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for IsDeploying_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Error {
    // message fields
    pub resource: ::std::string::String,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub field_type: Error_Types,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // string resource = 1;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }

    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .hub.Error.Types type = 4;


    pub fn get_field_type(&self) -> Error_Types {
        self.field_type
    }

    pub fn clear_field_type(&mut self) {
        self.field_type = Error_Types::TYPES_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Error_Types) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                }
                4 => ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.field_type,
                    4,
                    &mut self.unknown_fields,
                )?,
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.field_type != Error_Types::TYPES_INVALID {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.resource.is_empty() {
            os.write_string(1, &self.resource)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.field_type != Error_Types::TYPES_INVALID {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "resource",
                |m: &Error| &m.resource,
                |m: &mut Error| &mut m.resource,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "name", |m: &Error| &m.name, |m: &mut Error| &mut m.name
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "description",
                |m: &Error| &m.description,
                |m: &mut Error| &mut m.description,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeEnum<Error_Types>,
            >(
                "type",
                |m: &Error| &m.field_type,
                |m: &mut Error| &mut m.field_type,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Error>(
                "Error",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Error {
        static instance: ::protobuf::rt::LazyV2<Error> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Error::new)
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.resource.clear();
        self.name.clear();
        self.description.clear();
        self.field_type = Error_Types::TYPES_INVALID;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Error_Types {
    TYPES_INVALID = 0,
    TYPES_INFO = 1,
    TYPES_WARNING = 2,
    TYPES_CRITICAL = 3,
}

impl ::protobuf::ProtobufEnum for Error_Types {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Error_Types> {
        match value {
            0 => ::std::option::Option::Some(Error_Types::TYPES_INVALID),
            1 => ::std::option::Option::Some(Error_Types::TYPES_INFO),
            2 => ::std::option::Option::Some(Error_Types::TYPES_WARNING),
            3 => ::std::option::Option::Some(Error_Types::TYPES_CRITICAL),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Error_Types] = &[
            Error_Types::TYPES_INVALID,
            Error_Types::TYPES_INFO,
            Error_Types::TYPES_WARNING,
            Error_Types::TYPES_CRITICAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Error_Types>(
                "Error.Types",
                file_descriptor_proto(),
            )
        })
    }
}

impl ::std::marker::Copy for Error_Types {}

impl ::std::default::Default for Error_Types {
    fn default() -> Self {
        Error_Types::TYPES_INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for Error_Types {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Service {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub selectors: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub errors: ::std::collections::HashMap<::std::string::String, Service_RepeatedError>,
    pub kubernetes: ::protobuf::SingularPtrField<Service_Kubernetes>,
    pub meta: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub namespace: ::std::string::String,
    pub cluster: ::std::string::String,
    pub environment: ::std::string::String,
    pub plugins: ::std::collections::HashMap<::std::string::String, Plugin>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Service {
    fn default() -> &'a Service {
        <Service as ::protobuf::Message>::default_instance()
    }
}

impl Service {
    pub fn new() -> Service {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }

    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // repeated .hub.Service.SelectorsEntry selectors = 3;


    pub fn get_selectors(
        &self,
    ) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.selectors
    }

    pub fn clear_selectors(&mut self) {
        self.selectors.clear();
    }

    // Param is passed by value, moved
    pub fn set_selectors(
        &mut self,
        v: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ) {
        self.selectors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_selectors(
        &mut self,
    ) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.selectors
    }

    // Take field
    pub fn take_selectors(
        &mut self,
    ) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.selectors, ::std::collections::HashMap::new())
    }

    // repeated .hub.Service.ErrorsEntry errors = 4;


    pub fn get_errors(&self) -> &::std::collections::HashMap<::std::string::String, Service_RepeatedError> {
        &self.errors
    }

    pub fn clear_errors(&mut self) {
        self.errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_errors(
        &mut self,
        v: ::std::collections::HashMap<::std::string::String, Service_RepeatedError>,
    ) {
        self.errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_errors(
        &mut self,
    ) -> &mut ::std::collections::HashMap<::std::string::String, Service_RepeatedError> {
        &mut self.errors
    }

    // Take field
    pub fn take_errors(
        &mut self,
    ) -> ::std::collections::HashMap<::std::string::String, Service_RepeatedError> {
        ::std::mem::replace(&mut self.errors, ::std::collections::HashMap::new())
    }

    // .hub.Service.Kubernetes kubernetes = 5;


    pub fn get_kubernetes(&self) -> &Service_Kubernetes {
        self.kubernetes
            .as_ref()
            .unwrap_or_else(|| <Service_Kubernetes as ::protobuf::Message>::default_instance())
    }

    pub fn clear_kubernetes(&mut self) {
        self.kubernetes.clear();
    }

    pub fn has_kubernetes(&self) -> bool {
        self.kubernetes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kubernetes(&mut self, v: Service_Kubernetes) {
        self.kubernetes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kubernetes(&mut self) -> &mut Service_Kubernetes {
        if self.kubernetes.is_none() {
            self.kubernetes.set_default();
        }
        self.kubernetes.as_mut().unwrap()
    }

    // Take field
    pub fn take_kubernetes(&mut self) -> Service_Kubernetes {
        self.kubernetes
            .take()
            .unwrap_or_else(|| Service_Kubernetes::new())
    }

    // repeated .hub.Service.MetaEntry meta = 6;


    pub fn get_meta(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.meta
    }

    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.meta = v;
    }

    // Mutable pointer to the field.
    pub fn mut_meta(
        &mut self,
    ) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.meta
    }

    // Take field
    pub fn take_meta(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.meta, ::std::collections::HashMap::new())
    }

    // string namespace = 7;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }

    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string cluster = 8;


    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }

    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    // string environment = 9;


    pub fn get_environment(&self) -> &str {
        &self.environment
    }

    pub fn clear_environment(&mut self) {
        self.environment.clear();
    }

    // Param is passed by value, moved
    pub fn set_environment(&mut self, v: ::std::string::String) {
        self.environment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_environment(&mut self) -> &mut ::std::string::String {
        &mut self.environment
    }

    // Take field
    pub fn take_environment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.environment, ::std::string::String::new())
    }

    // repeated .hub.Service.PluginsEntry plugins = 10;


    pub fn get_plugins(&self) -> &::std::collections::HashMap<::std::string::String, Plugin> {
        &self.plugins
    }

    pub fn clear_plugins(&mut self) {
        self.plugins.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugins(&mut self, v: ::std::collections::HashMap<::std::string::String, Plugin>) {
        self.plugins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plugins(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Plugin> {
        &mut self.plugins
    }

    // Take field
    pub fn take_plugins(&mut self) -> ::std::collections::HashMap<::std::string::String, Plugin> {
        ::std::mem::replace(&mut self.plugins, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Service {
    fn is_initialized(&self) -> bool {
        for v in &self.kubernetes {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                }
                3 => {
                    ::protobuf::rt::read_map_into::<
                        ::protobuf::types::ProtobufTypeString,
                        ::protobuf::types::ProtobufTypeString,
                    >(wire_type, is, &mut self.selectors)?;
                }
                4 => {
                    ::protobuf::rt::read_map_into::<
                        ::protobuf::types::ProtobufTypeString,
                        ::protobuf::types::ProtobufTypeMessage<Service_RepeatedError>,
                    >(wire_type, is, &mut self.errors)?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kubernetes)?;
                }
                6 => {
                    ::protobuf::rt::read_map_into::<
                        ::protobuf::types::ProtobufTypeString,
                        ::protobuf::types::ProtobufTypeString,
                    >(wire_type, is, &mut self.meta)?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.environment)?;
                }
                10 => {
                    ::protobuf::rt::read_map_into::<
                        ::protobuf::types::ProtobufTypeString,
                        ::protobuf::types::ProtobufTypeMessage<Plugin>,
                    >(wire_type, is, &mut self.plugins)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        my_size += ::protobuf::rt::compute_map_size::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeString,
        >(3, &self.selectors);
        my_size += ::protobuf::rt::compute_map_size::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Service_RepeatedError>,
        >(4, &self.errors);
        if let Some(ref v) = self.kubernetes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeString,
        >(6, &self.meta);
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.namespace);
        }
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.cluster);
        }
        if !self.environment.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.environment);
        }
        my_size += ::protobuf::rt::compute_map_size::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Plugin>,
        >(10, &self.plugins);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeString,
        >(3, &self.selectors, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Service_RepeatedError>,
        >(4, &self.errors, os)?;
        if let Some(ref v) = self.kubernetes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeString,
        >(6, &self.meta, os)?;
        if !self.namespace.is_empty() {
            os.write_string(7, &self.namespace)?;
        }
        if !self.cluster.is_empty() {
            os.write_string(8, &self.cluster)?;
        }
        if !self.environment.is_empty() {
            os.write_string(9, &self.environment)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Plugin>,
        >(10, &self.plugins, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Service {
        Service::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "name", |m: &Service| &m.name, |m: &mut Service| &mut m.name
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "version",
                |m: &Service| &m.version,
                |m: &mut Service| &mut m.version,
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
                ::protobuf::types::ProtobufTypeString,
            >(
                "selectors",
                |m: &Service| &m.selectors,
                |m: &mut Service| &mut m.selectors,
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
                ::protobuf::types::ProtobufTypeMessage<Service_RepeatedError>,
            >(
                "errors",
                |m: &Service| &m.errors,
                |m: &mut Service| &mut m.errors,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<Service_Kubernetes>,
            >(
                "kubernetes",
                |m: &Service| &m.kubernetes,
                |m: &mut Service| &mut m.kubernetes,
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
                ::protobuf::types::ProtobufTypeString,
            >(
                "meta", |m: &Service| &m.meta, |m: &mut Service| &mut m.meta
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "namespace",
                |m: &Service| &m.namespace,
                |m: &mut Service| &mut m.namespace,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "cluster",
                |m: &Service| &m.cluster,
                |m: &mut Service| &mut m.cluster,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "environment",
                |m: &Service| &m.environment,
                |m: &mut Service| &mut m.environment,
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
                ::protobuf::types::ProtobufTypeMessage<Plugin>,
            >(
                "plugins",
                |m: &Service| &m.plugins,
                |m: &mut Service| &mut m.plugins,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Service>(
                "Service",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Service {
        static instance: ::protobuf::rt::LazyV2<Service> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Service::new)
    }
}

impl ::protobuf::Clear for Service {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.selectors.clear();
        self.errors.clear();
        self.kubernetes.clear();
        self.meta.clear();
        self.namespace.clear();
        self.cluster.clear();
        self.environment.clear();
        self.plugins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Service {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Service_RepeatedError {
    // message fields
    pub errors: ::protobuf::RepeatedField<Error>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Service_RepeatedError {
    fn default() -> &'a Service_RepeatedError {
        <Service_RepeatedError as ::protobuf::Message>::default_instance()
    }
}

impl Service_RepeatedError {
    pub fn new() -> Service_RepeatedError {
        ::std::default::Default::default()
    }

    // repeated .hub.Error errors = 1;


    pub fn get_errors(&self) -> &[Error] {
        &self.errors
    }

    pub fn clear_errors(&mut self) {
        self.errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_errors(&mut self, v: ::protobuf::RepeatedField<Error>) {
        self.errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_errors(&mut self) -> &mut ::protobuf::RepeatedField<Error> {
        &mut self.errors
    }

    // Take field
    pub fn take_errors(&mut self) -> ::protobuf::RepeatedField<Error> {
        ::std::mem::replace(&mut self.errors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Service_RepeatedError {
    fn is_initialized(&self) -> bool {
        for v in &self.errors {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.errors)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.errors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Service_RepeatedError {
        Service_RepeatedError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<Error>,
            >(
                "errors",
                |m: &Service_RepeatedError| &m.errors,
                |m: &mut Service_RepeatedError| &mut m.errors,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Service_RepeatedError>(
                "Service.RepeatedError",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Service_RepeatedError {
        static instance: ::protobuf::rt::LazyV2<Service_RepeatedError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Service_RepeatedError::new)
    }
}

impl ::protobuf::Clear for Service_RepeatedError {
    fn clear(&mut self) {
        self.errors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Service_RepeatedError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service_RepeatedError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Service_Kubernetes {
    // message fields
    pub is_deploying: ::protobuf::SingularPtrField<IsDeploying>,
    pub desired_replicas: u32,
    pub available_replicas: u32,
    pub replica_sets: ::protobuf::RepeatedField<Service_Kubernetes_ReplicaSet>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Service_Kubernetes {
    fn default() -> &'a Service_Kubernetes {
        <Service_Kubernetes as ::protobuf::Message>::default_instance()
    }
}

impl Service_Kubernetes {
    pub fn new() -> Service_Kubernetes {
        ::std::default::Default::default()
    }

    // .hub.IsDeploying is_deploying = 1;


    pub fn get_is_deploying(&self) -> &IsDeploying {
        self.is_deploying
            .as_ref()
            .unwrap_or_else(|| <IsDeploying as ::protobuf::Message>::default_instance())
    }

    pub fn clear_is_deploying(&mut self) {
        self.is_deploying.clear();
    }

    pub fn has_is_deploying(&self) -> bool {
        self.is_deploying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_deploying(&mut self, v: IsDeploying) {
        self.is_deploying = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_is_deploying(&mut self) -> &mut IsDeploying {
        if self.is_deploying.is_none() {
            self.is_deploying.set_default();
        }
        self.is_deploying.as_mut().unwrap()
    }

    // Take field
    pub fn take_is_deploying(&mut self) -> IsDeploying {
        self.is_deploying.take().unwrap_or_else(|| IsDeploying::new())
    }

    // uint32 desired_replicas = 2;


    pub fn get_desired_replicas(&self) -> u32 {
        self.desired_replicas
    }

    pub fn clear_desired_replicas(&mut self) {
        self.desired_replicas = 0;
    }

    // Param is passed by value, moved
    pub fn set_desired_replicas(&mut self, v: u32) {
        self.desired_replicas = v;
    }

    // uint32 available_replicas = 3;


    pub fn get_available_replicas(&self) -> u32 {
        self.available_replicas
    }

    pub fn clear_available_replicas(&mut self) {
        self.available_replicas = 0;
    }

    // Param is passed by value, moved
    pub fn set_available_replicas(&mut self, v: u32) {
        self.available_replicas = v;
    }

    // repeated .hub.Service.Kubernetes.ReplicaSet replica_sets = 4;


    pub fn get_replica_sets(&self) -> &[Service_Kubernetes_ReplicaSet] {
        &self.replica_sets
    }

    pub fn clear_replica_sets(&mut self) {
        self.replica_sets.clear();
    }

    // Param is passed by value, moved
    pub fn set_replica_sets(&mut self, v: ::protobuf::RepeatedField<Service_Kubernetes_ReplicaSet>) {
        self.replica_sets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_replica_sets(&mut self) -> &mut ::protobuf::RepeatedField<Service_Kubernetes_ReplicaSet> {
        &mut self.replica_sets
    }

    // Take field
    pub fn take_replica_sets(&mut self) -> ::protobuf::RepeatedField<Service_Kubernetes_ReplicaSet> {
        ::std::mem::replace(&mut self.replica_sets, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Service_Kubernetes {
    fn is_initialized(&self) -> bool {
        for v in &self.is_deploying {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.replica_sets {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.is_deploying)?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.desired_replicas = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.available_replicas = tmp;
                }
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.replica_sets)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.is_deploying.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.desired_replicas != 0 {
            my_size +=
                ::protobuf::rt::value_size(2, self.desired_replicas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.available_replicas != 0 {
            my_size += ::protobuf::rt::value_size(
                3,
                self.available_replicas,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        for value in &self.replica_sets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.is_deploying.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.desired_replicas != 0 {
            os.write_uint32(2, self.desired_replicas)?;
        }
        if self.available_replicas != 0 {
            os.write_uint32(3, self.available_replicas)?;
        }
        for v in &self.replica_sets {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Service_Kubernetes {
        Service_Kubernetes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<IsDeploying>,
            >(
                "is_deploying",
                |m: &Service_Kubernetes| &m.is_deploying,
                |m: &mut Service_Kubernetes| &mut m.is_deploying,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "desired_replicas",
                |m: &Service_Kubernetes| &m.desired_replicas,
                |m: &mut Service_Kubernetes| &mut m.desired_replicas,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "available_replicas",
                |m: &Service_Kubernetes| &m.available_replicas,
                |m: &mut Service_Kubernetes| &mut m.available_replicas,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<Service_Kubernetes_ReplicaSet>,
            >(
                "replica_sets",
                |m: &Service_Kubernetes| &m.replica_sets,
                |m: &mut Service_Kubernetes| &mut m.replica_sets,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Service_Kubernetes>(
                "Service.Kubernetes",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Service_Kubernetes {
        static instance: ::protobuf::rt::LazyV2<Service_Kubernetes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Service_Kubernetes::new)
    }
}

impl ::protobuf::Clear for Service_Kubernetes {
    fn clear(&mut self) {
        self.is_deploying.clear();
        self.desired_replicas = 0;
        self.available_replicas = 0;
        self.replica_sets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Service_Kubernetes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service_Kubernetes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Service_Kubernetes_ReplicaSet {
    // message fields
    pub version: ::std::string::String,
    pub desired_pods: u32,
    pub available_pods: u32,
    pub name: ::std::string::String,
    pub created_at_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Service_Kubernetes_ReplicaSet {
    fn default() -> &'a Service_Kubernetes_ReplicaSet {
        <Service_Kubernetes_ReplicaSet as ::protobuf::Message>::default_instance()
    }
}

impl Service_Kubernetes_ReplicaSet {
    pub fn new() -> Service_Kubernetes_ReplicaSet {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }

    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // uint32 desired_pods = 2;


    pub fn get_desired_pods(&self) -> u32 {
        self.desired_pods
    }

    pub fn clear_desired_pods(&mut self) {
        self.desired_pods = 0;
    }

    // Param is passed by value, moved
    pub fn set_desired_pods(&mut self, v: u32) {
        self.desired_pods = v;
    }

    // uint32 available_pods = 3;


    pub fn get_available_pods(&self) -> u32 {
        self.available_pods
    }

    pub fn clear_available_pods(&mut self) {
        self.available_pods = 0;
    }

    // Param is passed by value, moved
    pub fn set_available_pods(&mut self, v: u32) {
        self.available_pods = v;
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp created_at_time = 5;


    pub fn get_created_at_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at_time.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }

    pub fn clear_created_at_time(&mut self) {
        self.created_at_time.clear();
    }

    pub fn has_created_at_time(&self) -> bool {
        self.created_at_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at_time.is_none() {
            self.created_at_time.set_default();
        }
        self.created_at_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at_time
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Service_Kubernetes_ReplicaSet {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at_time {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.desired_pods = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.available_pods = tmp;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at_time)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.desired_pods != 0 {
            my_size +=
                ::protobuf::rt::value_size(2, self.desired_pods, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.available_pods != 0 {
            my_size +=
                ::protobuf::rt::value_size(3, self.available_pods, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if let Some(ref v) = self.created_at_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.desired_pods != 0 {
            os.write_uint32(2, self.desired_pods)?;
        }
        if self.available_pods != 0 {
            os.write_uint32(3, self.available_pods)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if let Some(ref v) = self.created_at_time.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Service_Kubernetes_ReplicaSet {
        Service_Kubernetes_ReplicaSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "version",
                |m: &Service_Kubernetes_ReplicaSet| &m.version,
                |m: &mut Service_Kubernetes_ReplicaSet| &mut m.version,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "desired_pods",
                |m: &Service_Kubernetes_ReplicaSet| &m.desired_pods,
                |m: &mut Service_Kubernetes_ReplicaSet| &mut m.desired_pods,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint32,
            >(
                "available_pods",
                |m: &Service_Kubernetes_ReplicaSet| &m.available_pods,
                |m: &mut Service_Kubernetes_ReplicaSet| &mut m.available_pods,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "name",
                |m: &Service_Kubernetes_ReplicaSet| &m.name,
                |m: &mut Service_Kubernetes_ReplicaSet| &mut m.name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
            >(
                "created_at_time",
                |m: &Service_Kubernetes_ReplicaSet| &m.created_at_time,
                |m: &mut Service_Kubernetes_ReplicaSet| &mut m.created_at_time,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Service_Kubernetes_ReplicaSet>(
                "Service.Kubernetes.ReplicaSet",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Service_Kubernetes_ReplicaSet {
        static instance: ::protobuf::rt::LazyV2<Service_Kubernetes_ReplicaSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Service_Kubernetes_ReplicaSet::new)
    }
}

impl ::protobuf::Clear for Service_Kubernetes_ReplicaSet {
    fn clear(&mut self) {
        self.version.clear();
        self.desired_pods = 0;
        self.available_pods = 0;
        self.name.clear();
        self.created_at_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Service_Kubernetes_ReplicaSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service_Kubernetes_ReplicaSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ServicesResponse {
    // message fields
    pub services: ::std::collections::HashMap<::std::string::String, Service>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServicesResponse {
    fn default() -> &'a ServicesResponse {
        <ServicesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ServicesResponse {
    pub fn new() -> ServicesResponse {
        ::std::default::Default::default()
    }

    // repeated .hub.ServicesResponse.ServicesEntry services = 1;


    pub fn get_services(&self) -> &::std::collections::HashMap<::std::string::String, Service> {
        &self.services
    }

    pub fn clear_services(&mut self) {
        self.services.clear();
    }

    // Param is passed by value, moved
    pub fn set_services(&mut self, v: ::std::collections::HashMap<::std::string::String, Service>) {
        self.services = v;
    }

    // Mutable pointer to the field.
    pub fn mut_services(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Service> {
        &mut self.services
    }

    // Take field
    pub fn take_services(&mut self) -> ::std::collections::HashMap<::std::string::String, Service> {
        ::std::mem::replace(&mut self.services, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ServicesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<
                        ::protobuf::types::ProtobufTypeString,
                        ::protobuf::types::ProtobufTypeMessage<Service>,
                    >(wire_type, is, &mut self.services)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Service>,
        >(1, &self.services);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<
            ::protobuf::types::ProtobufTypeString,
            ::protobuf::types::ProtobufTypeMessage<Service>,
        >(1, &self.services, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServicesResponse {
        ServicesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
                ::protobuf::types::ProtobufTypeMessage<Service>,
            >(
                "services",
                |m: &ServicesResponse| &m.services,
                |m: &mut ServicesResponse| &mut m.services,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServicesResponse>(
                "ServicesResponse",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static ServicesResponse {
        static instance: ::protobuf::rt::LazyV2<ServicesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServicesResponse::new)
    }
}

impl ::protobuf::Clear for ServicesResponse {
    fn clear(&mut self) {
        self.services.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServicesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServicesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Plugin {
    // message fields
    pub name: ::std::string::String,
    pub url: ::std::string::String,
    pub icon: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Plugin {
    fn default() -> &'a Plugin {
        <Plugin as ::protobuf::Message>::default_instance()
    }
}

impl Plugin {
    pub fn new() -> Plugin {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string url = 2;


    pub fn get_url(&self) -> &str {
        &self.url
    }

    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // string icon = 3;


    pub fn get_icon(&self) -> &str {
        &self.icon
    }

    pub fn clear_icon(&mut self) {
        self.icon.clear();
    }

    // Param is passed by value, moved
    pub fn set_icon(&mut self, v: ::std::string::String) {
        self.icon = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon(&mut self) -> &mut ::std::string::String {
        &mut self.icon
    }

    // Take field
    pub fn take_icon(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.icon, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Plugin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.icon)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.url);
        }
        if !self.icon.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.icon);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.url.is_empty() {
            os.write_string(2, &self.url)?;
        }
        if !self.icon.is_empty() {
            os.write_string(3, &self.icon)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }

    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }

    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Plugin {
        Plugin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "name", |m: &Plugin| &m.name, |m: &mut Plugin| &mut m.name
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "url", |m: &Plugin| &m.url, |m: &mut Plugin| &mut m.url
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "icon", |m: &Plugin| &m.icon, |m: &mut Plugin| &mut m.icon
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Plugin>(
                "Plugin",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Plugin {
        static instance: ::protobuf::rt::LazyV2<Plugin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Plugin::new)
    }
}

impl ::protobuf::Clear for Plugin {
    fn clear(&mut self) {
        self.name.clear();
        self.url.clear();
        self.icon.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Plugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plugin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eservices.proto\x12\x03hub\x1a\x1fgoogle/protobuf/timestamp.proto\"\
    \x89\x01\n\x0bIsDeploying\x12/\n\x06status\x18\x01\x20\x01(\x0e2\x17.hub\
    .IsDeploying.StatusR\x06status\"I\n\x06Status\x12\x12\n\x0eSTATUS_INVALI\
    D\x10\0\x12\x16\n\x12STATUS_IN_PROGRESS\x10\x01\x12\x13\n\x0fSTATUS_COMP\
    LETE\x10\x02\"\xd2\x01\n\x05Error\x12\x1a\n\x08resource\x18\x01\x20\x01(\
    \tR\x08resource\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x20\n\
    \x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12$\n\x04type\x18\
    \x04\x20\x01(\x0e2\x10.hub.Error.TypesR\x04type\"Q\n\x05Types\x12\x11\n\
    \rTYPES_INVALID\x10\0\x12\x0e\n\nTYPES_INFO\x10\x01\x12\x11\n\rTYPES_WAR\
    NING\x10\x02\x12\x12\n\x0eTYPES_CRITICAL\x10\x03\"\x94\t\n\x07Service\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\
    \x02\x20\x01(\tR\x07version\x129\n\tselectors\x18\x03\x20\x03(\x0b2\x1b.\
    hub.Service.SelectorsEntryR\tselectors\x120\n\x06errors\x18\x04\x20\x03(\
    \x0b2\x18.hub.Service.ErrorsEntryR\x06errors\x127\n\nkubernetes\x18\x05\
    \x20\x01(\x0b2\x17.hub.Service.KubernetesR\nkubernetes\x12*\n\x04meta\
    \x18\x06\x20\x03(\x0b2\x16.hub.Service.MetaEntryR\x04meta\x12\x1c\n\tnam\
    espace\x18\x07\x20\x01(\tR\tnamespace\x12\x18\n\x07cluster\x18\x08\x20\
    \x01(\tR\x07cluster\x12\x20\n\x0benvironment\x18\t\x20\x01(\tR\x0benviro\
    nment\x123\n\x07plugins\x18\n\x20\x03(\x0b2\x19.hub.Service.PluginsEntry\
    R\x07plugins\x1a3\n\rRepeatedError\x12\"\n\x06errors\x18\x01\x20\x03(\
    \x0b2\n.hub.ErrorR\x06errors\x1a\xad\x03\n\nKubernetes\x123\n\x0cis_depl\
    oying\x18\x01\x20\x01(\x0b2\x10.hub.IsDeployingR\x0bisDeploying\x12)\n\
    \x10desired_replicas\x18\x02\x20\x01(\rR\x0fdesiredReplicas\x12-\n\x12av\
    ailable_replicas\x18\x03\x20\x01(\rR\x11availableReplicas\x12E\n\x0crepl\
    ica_sets\x18\x04\x20\x03(\x0b2\".hub.Service.Kubernetes.ReplicaSetR\x0br\
    eplicaSets\x1a\xc8\x01\n\nReplicaSet\x12\x18\n\x07version\x18\x01\x20\
    \x01(\tR\x07version\x12!\n\x0cdesired_pods\x18\x02\x20\x01(\rR\x0bdesire\
    dPods\x12%\n\x0eavailable_pods\x18\x03\x20\x01(\rR\ravailablePods\x12\
    \x12\n\x04name\x18\x04\x20\x01(\tR\x04name\x12B\n\x0fcreated_at_time\x18\
    \x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\rcreatedAtTime\x1a<\n\
    \x0eSelectorsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aU\n\x0bErrorsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x120\n\x05value\x18\x02\x20\
    \x01(\x0b2\x1a.hub.Service.RepeatedErrorR\x05value:\x028\x01\x1a7\n\tMet\
    aEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aG\n\x0cPluginsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12!\n\x05value\x18\x02\x20\x01(\x0b2\
    \x0b.hub.PluginR\x05value:\x028\x01\"\x9e\x01\n\x10ServicesResponse\x12?\
    \n\x08services\x18\x01\x20\x03(\x0b2#.hub.ServicesResponse.ServicesEntry\
    R\x08services\x1aI\n\rServicesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\"\n\x05value\x18\x02\x20\x01(\x0b2\x0c.hub.ServiceR\x05value\
    :\x028\x01\"B\n\x06Plugin\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x10\n\x03url\x18\x02\x20\x01(\tR\x03url\x12\x12\n\x04icon\x18\x03\
    \x20\x01(\tR\x04iconBA\n\x15com.babylonhealth.hubB\rServicesProtoP\x01Z\
    \x05hubpb\xa2\x02\x03HXX\xaa\x02\x03Hub\xca\x02\x03Hubb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> =
    ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| parse_descriptor_proto())
}
