initSidebarItems({"enum":[["ConfigState","Various states a Config can exist in depending on resolution."],["ErrorKind","The kind of an error."],["VersionScheme","Versioning Scheme used in region"],["Webhook","Webhook types that shipcat might trigger after actions"]],"fn":[["init","Smart initialiser with safety"]],"mod":[["apply","Apply logic"],["audit","Audit objects and API caller"],["auth","Cluster auth"],["cluster","Cluster level operations"],["config","Master config with cross-region data"],["diff","Diffing module for values"],["env","Env module for sourcing secrets"],["gdpr","gdpr lister"],["get","Various simple reducers"],["git","Git stuff"],["graph","A graph generator for manifests using `petgraph`"],["helm","A small CLI helm template interface"],["kong","A small CLI kong config generator interface"],["kubeapi","A newer API kubernetes interface"],["kubectl","A small CLI kubernetes interface"],["list","Convenience listers"],["show","Simple printers"],["slack","A post interface to slack using `slack_hook`"],["status","Status subcommand"],["statuscake","A small CLI Statuscake config generator interface"],["structs","Structs for the manifest"],["top","Top resource use"],["track","A newer upgrade tracking interface"],["upgrade","Shipcat self upgrade Interface to shipcat self-upgrade"],["validate","Validation methods of manifests post merge"],["webhooks","Webhook mux/demux"]],"struct":[["AuditWebhook","Where / how to send audited events"],["Config","Main manifest, serializable from shipcat.conf"],["ConfigFallback","Simplified config with version information only"],["Error","The Error type."],["KongConfig","Kong configuration for a region"],["Manifest","Main manifest, serializable from manifest.yml or the shipcat CRD."],["Region","A region is an abstract kube context"]],"trait":[["ResultExt","Additional methods for `Result`, for easy interaction with this crate."]],"type":[["Result","Convenient wrapper around `std::Result`."]]});